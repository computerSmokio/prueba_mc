AWSTemplateFormatVersion: 2010-09-09
Mappings:
    AppConfig:
      API:
        PORT: 8080
    SubnetConfig:
      VPC:
        CIDR: "10.0.0.0/16"
      Private:
        CIDR: "10.0.1.0/24"
      Public:
        CIDR: "10.0.0.0/24"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
  PrivateSubnet:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Private"
            - "CIDR"
  PrivateRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
  PrivateSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet"
        RouteTableId:
          Ref: "PrivateRouteTable"
  PrivateEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable NAT instance to access the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
            Fn::FindInMap:
              - "AppConfig"
              - "API"
              - "PORT"
          ToPort:
            Fn::FindInMap:
              - "AppConfig"
              - "API"
              - "PORT"
          CidrIp:
            Fn::FindInMap:
              - "SubnetConfig"
              - "Public"
              - "CIDR"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT-SG
  EC2I4RZA6:
    Type: 'AWS::EC2::Instance'
    Properties: 
      InstanceType: 't2.micro'
      ImageId: 'ami-1853ac65'
      KeyName: "matias_admin"
      SubnetId: 
        Ref: "PrivateSubnet"
      SecurityGroupIds:
        - !Ref PrivateEC2SecurityGroup  
  EC2I80L5:
    Type: 'AWS::EC2::Instance'
    Properties:  
      InstanceType: 't2.micro'
      ImageId: 'ami-1853ac65'
      SubnetId: 
        Ref: "PrivateSubnet"
      SecurityGroupIds:
        - !Ref PrivateEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          docker run -v /dev/sdh:/app/data -d -p 8080:8080 --name json-api matiasnv2018/json-api
  PrivateRouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref EC2NatGateway
  EC2V3KIVD:
    Type: 'AWS::EC2::Volume'
    Properties:  
      Size: 1
      AvailabilityZone: { "Fn::GetAtt" : ["EC2I80L5", "AvailabilityZone"] }
 
  EC2VA2M0LC:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      Device: '/dev/sdh'
      VolumeId: !Ref EC2V4XZKL
      InstanceId: !Ref EC2I4RZA6
 
  EC2VA4O8N1:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      Device: '/dev/sdh'
      VolumeId: !Ref EC2V3KIVD
      InstanceId: !Ref EC2I80L5
 
  EFSFSEQKW:
    Type: 'AWS::EFS::FileSystem'
    Properties: {}
###### END OF PRIVATE STUFF ######
###### START OF PUBLIC STUFF ######
  NatInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable NAT instance to access the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT-SG
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public"
          - "CIDR"
  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
  PublicSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet"
        RouteTableId:
          Ref: "PublicRouteTable"
  EC2NatGateway:
    Type: 'AWS::EC2::Instance'
    Properties: 
      InstanceType: 't2.micro'
      ImageId: 'ami-1853ac65'
      KeyName: matias_admin
      SourceDestCheck: false
      Environment:
        Variables:
          http_proxy: "http://
      SubnetId: 
        Ref: "PublicSubnet"
      SecurityGroupIds:
        - !Ref NatInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo 1 > /proc/sys/net/ipv4/ip_forward
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          yum update -y
          yum install -y haproxy
          curl -o /etc/haproxy/haproxy.cfg https://raw.githubusercontent.com/computerSmokio/prueba_mc/feature-nginx-n-dockercompose/loadbalancers/haproxy.cfg?token=GHSAT0AAAAAACJC3GVBPYHXDE6PEGZ3VB7GZKCYSEA
          export HAPROXY_PORT=${HAPROXY_PORT}
          export API_PORT=${API_PORT}
          export HAPROXY_STATS_PORT=${HAPROXY_STATS_PORT}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteToInternetGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InternetGatewayId: !Ref InternetGateway