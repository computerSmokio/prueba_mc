AWSTemplateFormatVersion: 2010-09-09

Resources:

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: AddServerToHAProxyLambda
      Code: 
        ZipFile: |
          const net = require('net');
          const AWS = require('aws-sdk');

          exports.handler = async (event) => {
              const newServerPort = process.env.NEW_SERVER_PORT;
              const haproxyEndpoint = process.env.HAPROXY_ENDPOINT;
              
              const haproxyBackend = 'app-servers'
              const newServerName = 'new_server'; 
              const instanceId = event.detail['EC2InstanceId'];
              
              const ec2 = new AWS.EC2();
              const instanceDesc = await ec2.describeInstances([instanceId]).promise();
              const newServerIp = instanceDesc.Reservations[0].Instances[0].PrivateIpAddress;
              // Construct the HAProxy stats command to add a new server
              const command = `add server ${haproxyBackend}/${newServerName} ${newServerIp}:${newServerPort}`;
              // Create a socket connection to the HAProxy stats socket
              
              const client = new net.Socket();
              return new Promise((resolve, reject) => {
                  client.connect(haproxyEndpoint, () => {
                      console.log('Connected to HAProxy stats socket');
                      client.write(`${command}\n`);
                  });

                  client.on('data', (data) => {
                      console.log(`Received: ${data}`);
                      client.end();
                      resolve('Server added successfully');
                  });

                  client.on('error', (err) => {
                      console.error(`Error: ${err}`);
                      client.destroy();
                      reject('Error adding server to HAProxy');
                  });
              });
          };
      Runtime: "nodejs14.x"
      Timeout: 30

  LambdaExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: LambdaExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - "ec2:DescribeInstances"
                  Resource: "*"

  EventRule:
      Type: "AWS::Events::Rule"
      Properties:
        Description: "Trigger Lambda on ASG instance launch"
        EventPattern:
          source:
            - "aws.autoscaling"
          detailType:
            - "EC2 Instance Launch Successful"
          detail:
            AutoScalingGroupName:
              - !Ref AutoScalingGroupName
        State: "ENABLED"
        Targets:
          - Arn: !GetAtt LambdaFunction.Arn
            Id: "AddServerToHAProxyLambdaTarget"